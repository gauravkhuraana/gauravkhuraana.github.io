"use strict";(self.webpackChunkgauravkhurana=self.webpackChunkgauravkhurana||[]).push([[2927],{8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(6540);const o={},i=s.createContext(o);function l(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(i.Provider,{value:n},e.children)}},9911:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Tools/browser-console-snippets","title":"Browser Console Snippets","description":"Browser console snippets are powerful JavaScript code pieces that help extract data, automate tasks, and analyze web pages directly from the browser\'s developer console. This collection focuses on practical snippets for testing, automation, and data extraction.","source":"@site/docs/Tools/browser-console-snippets.mdx","sourceDirName":"Tools","slug":"/Tools/browser-console-snippets","permalink":"/docs/Tools/browser-console-snippets","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"AutoHotkey Windows Shortcuts","permalink":"/docs/Tools/autohotkey-shortcuts"},"next":{"title":"Self Mastery","permalink":"/docs/category/self-mastery"}}');var o=t(4848),i=t(8453);const l={},a="Browser Console Snippets",r={},c=[{value:"YouTube Playlist Video Extraction",id:"youtube-playlist-video-extraction",level:2},{value:"Page Performance Testing",id:"page-performance-testing",level:2},{value:"Automated Form Testing",id:"automated-form-testing",level:2},{value:"Link Analysis and Broken Link Detection",id:"link-analysis-and-broken-link-detection",level:2},{value:"Accessibility Testing Helper",id:"accessibility-testing-helper",level:2},{value:"Test Data Validation and Storage",id:"test-data-validation-and-storage",level:2},{value:"Test Reporting and Logging",id:"test-reporting-and-logging",level:2},{value:"Element Interaction Testing",id:"element-interaction-testing",level:2},{value:"Network Request Monitoring",id:"network-request-monitoring",level:2},{value:"Best Practices for Testing Snippets",id:"best-practices-for-testing-snippets",level:2},{value:"Testing Safety Guidelines",id:"testing-safety-guidelines",level:2},{value:"Connect With Me",id:"connect-with-me",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"browser-console-snippets",children:"Browser Console Snippets"})}),"\n",(0,o.jsx)(n.p,{children:"Browser console snippets are powerful JavaScript code pieces that help extract data, automate tasks, and analyze web pages directly from the browser's developer console. This collection focuses on practical snippets for testing, automation, and data extraction."}),"\n",(0,o.jsx)(n.h2,{id:"youtube-playlist-video-extraction",children:"YouTube Playlist Video Extraction"}),"\n",(0,o.jsx)(n.p,{children:"Extract all video titles and URLs from a YouTube playlist page. This snippet is useful for creating documentation, analyzing content, or building automated reports."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Get all videos from YouTube playlist with titles and URLs\nArray.from(document.querySelectorAll('ytd-playlist-video-renderer')).forEach(el => {\n  const title = el.querySelector('#video-title').textContent.trim();\n  const url = \"https://www.youtube.com\" + el.querySelector('a').getAttribute('href').split('&')[0];\n  console.log(`${title} - ${url}`);\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Usage Instructions:"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Navigate to any YouTube playlist page"}),"\n",(0,o.jsx)(n.li,{children:"Open browser developer tools (F12)"}),"\n",(0,o.jsx)(n.li,{children:"Go to Console tab"}),"\n",(0,o.jsx)(n.li,{children:"Paste and execute the script"}),"\n",(0,o.jsx)(n.li,{children:"Copy the output for your documentation"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"page-performance-testing",children:"Page Performance Testing"}),"\n",(0,o.jsx)(n.p,{children:"Analyze page load performance metrics for testing performance benchmarks and identifying slow-loading elements."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Get performance metrics for testing validation\nconst perfData = performance.timing;\nconst loadTime = perfData.loadEventEnd - perfData.navigationStart;\nconst domContentLoaded = perfData.domContentLoadedEventEnd - perfData.navigationStart;\n\nconsole.log(`Page Load Time: ${loadTime}ms`);\nconsole.log(`DOM Content Loaded: ${domContentLoaded}ms`);\nconsole.log(`Performance Test Result: ${loadTime < 3000 ? 'PASS' : 'FAIL'} (< 3s threshold)`);\nconsole.log(`Total Resources Loaded: ${performance.getEntriesByType('resource').length}`);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"automated-form-testing",children:"Automated Form Testing"}),"\n",(0,o.jsx)(n.p,{children:"Automatically fill form fields with test data for testing form validation and functionality."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Fill all form inputs with test data for automated testing\ndocument.querySelectorAll('input[type=\"text\"], input[type=\"email\"], input[type=\"tel\"], input[type=\"password\"]').forEach(input => {\n  if (input.type === 'email') {\n    input.value = 'testuser@testdomain.com';\n  } else if (input.type === 'tel') {\n    input.value = '+1234567890';\n  } else if (input.type === 'password') {\n    input.value = 'TestPassword123!';\n  } else {\n    input.value = 'Test Data Value';\n  }\n  // Trigger events for validation\n  input.dispatchEvent(new Event('input', { bubbles: true }));\n  input.dispatchEvent(new Event('change', { bubbles: true }));\n});\n\n// Fill textareas\ndocument.querySelectorAll('textarea').forEach(textarea => {\n  textarea.value = 'This is test content for textarea validation and functionality testing.';\n  textarea.dispatchEvent(new Event('input', { bubbles: true }));\n});\n\nconsole.log('Form fields filled with test data');\n"})}),"\n",(0,o.jsx)(n.h2,{id:"link-analysis-and-broken-link-detection",children:"Link Analysis and Broken Link Detection"}),"\n",(0,o.jsx)(n.p,{children:"Analyze all links on a page and identify potential issues."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Analyze all links on the page\nconst links = document.querySelectorAll('a[href]');\nconst linkData = [];\n\nlinks.forEach(link => {\n  const href = link.href;\n  const text = link.textContent.trim();\n  const isExternal = !href.startsWith(window.location.origin);\n  const isEmpty = !text || text.length === 0;\n  \n  linkData.push({\n    url: href,\n    text: text || '[No text]',\n    external: isExternal,\n    emptyText: isEmpty\n  });\n});\n\nconsole.log(`Total links found: ${links.length}`);\nconsole.log('External links:', linkData.filter(l => l.external));\nconsole.log('Links with no text:', linkData.filter(l => l.emptyText));\n"})}),"\n",(0,o.jsx)(n.h2,{id:"accessibility-testing-helper",children:"Accessibility Testing Helper"}),"\n",(0,o.jsx)(n.p,{children:"Check for common accessibility issues during testing."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Test accessibility compliance\nconst images = document.querySelectorAll('img');\nconst buttons = document.querySelectorAll('button, input[type=\"button\"], input[type=\"submit\"]');\nconst links = document.querySelectorAll('a');\nconst headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');\n\n// Check images without alt text\nconst imagesWithoutAlt = Array.from(images).filter(img => !img.alt || img.alt.trim() === '');\nconsole.log(`Images without alt text: ${imagesWithoutAlt.length}`);\nimagesWithoutAlt.forEach(img => console.log('Missing alt:', img.src));\n\n// Check buttons without accessible names\nconst buttonsWithoutText = Array.from(buttons).filter(btn => \n  !btn.textContent.trim() && !btn.getAttribute('aria-label') && !btn.getAttribute('title')\n);\nconsole.log(`Buttons without accessible names: ${buttonsWithoutText.length}`);\n\n// Check links without text\nconst emptyLinks = Array.from(links).filter(link => !link.textContent.trim());\nconsole.log(`Links without text: ${emptyLinks.length}`);\n\n// Check heading structure\nconst headingLevels = Array.from(headings).map(h => parseInt(h.tagName.charAt(1)));\nconsole.log('Heading structure:', headingLevels);\n\nconsole.log('\\n=== ACCESSIBILITY TEST SUMMARY ===');\nconsole.log(`Total accessibility issues found: ${imagesWithoutAlt.length + buttonsWithoutText.length + emptyLinks.length}`);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"test-data-validation-and-storage",children:"Test Data Validation and Storage"}),"\n",(0,o.jsx)(n.p,{children:"Inspect browser storage and validate test data persistence during testing."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Validate test data in browser storage\nconsole.log('=== TEST DATA VALIDATION ===');\n\n// Check localStorage for test data\nconsole.log('\\n--- Local Storage Test Data ---');\nif (localStorage.length > 0) {\n  for (let i = 0; i < localStorage.length; i++) {\n    const key = localStorage.key(i);\n    const value = localStorage.getItem(key);\n    console.log(`${key}: ${value.length > 50 ? value.substring(0, 50) + '...' : value}`);\n  }\n} else {\n  console.log('No data in localStorage');\n}\n\n// Check sessionStorage for test data\nconsole.log('\\n--- Session Storage Test Data ---');\nif (sessionStorage.length > 0) {\n  for (let i = 0; i < sessionStorage.length; i++) {\n    const key = sessionStorage.key(i);\n    const value = sessionStorage.getItem(key);\n    console.log(`${key}: ${value.length > 50 ? value.substring(0, 50) + '...' : value}`);\n  }\n} else {\n  console.log('No data in sessionStorage');\n}\n\n// Validate cookies for testing\nconsole.log('\\n--- Cookies Test Data ---');\nif (document.cookie) {\n  const cookies = document.cookie.split(';');\n  console.log(`Total cookies: ${cookies.length}`);\n  cookies.forEach(cookie => {\n    const [name, value] = cookie.trim().split('=');\n    console.log(`${name}: ${value ? value.substring(0, 30) + (value.length > 30 ? '...' : '') : 'empty'}`);\n  });\n} else {\n  console.log('No cookies found');\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"test-reporting-and-logging",children:"Test Reporting and Logging"}),"\n",(0,o.jsx)(n.p,{children:"Enhanced console logging utilities for test execution tracking and reporting."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Test execution logger with status tracking\nclass TestLogger {\n  constructor() {\n    this.testResults = [];\n    this.startTime = Date.now();\n  }\n\n  logTest(testName, status, details = '') {\n    const timestamp = new Date().toLocaleTimeString();\n    const result = { testName, status, details, timestamp };\n    this.testResults.push(result);\n    \n    const statusColor = {\n      'PASS': 'color: #4CAF50; font-weight: bold;',\n      'FAIL': 'color: #F44336; font-weight: bold;',\n      'SKIP': 'color: #FF9800; font-weight: bold;',\n      'INFO': 'color: #2196F3; font-weight: bold;'\n    };\n    \n    console.log(`%c[${timestamp}] ${status}: ${testName}`, statusColor[status] || statusColor['INFO']);\n    if (details) console.log(`   Details: ${details}`);\n  }\n\n  generateReport() {\n    const endTime = Date.now();\n    const duration = (endTime - this.startTime) / 1000;\n    \n    console.log('\\n%c=== TEST EXECUTION REPORT ===', 'color: #9C27B0; font-size: 16px; font-weight: bold;');\n    console.log(`Total Tests: ${this.testResults.length}`);\n    console.log(`Passed: ${this.testResults.filter(r => r.status === 'PASS').length}`);\n    console.log(`Failed: ${this.testResults.filter(r => r.status === 'FAIL').length}`);\n    console.log(`Skipped: ${this.testResults.filter(r => r.status === 'SKIP').length}`);\n    console.log(`Duration: ${duration}s`);\n    \n    return this.testResults;\n  }\n}\n\n// Usage example\nconst testLogger = new TestLogger();\n// testLogger.logTest('Login form validation', 'PASS', 'All fields validated correctly');\n// testLogger.logTest('Submit button functionality', 'FAIL', 'Button not responding to click');\n// testLogger.generateReport();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"element-interaction-testing",children:"Element Interaction Testing"}),"\n",(0,o.jsx)(n.p,{children:"Test element interactions and user interface responsiveness."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Test clickable elements and their responses\nfunction testClickableElements() {\n  const clickableElements = document.querySelectorAll('button, a, input[type=\"button\"], input[type=\"submit\"], [onclick]');\n  let workingElements = 0;\n  let brokenElements = 0;\n  \n  console.log(`Testing ${clickableElements.length} clickable elements...`);\n  \n  clickableElements.forEach((element, index) => {\n    const rect = element.getBoundingClientRect();\n    const isVisible = rect.width > 0 && rect.height > 0;\n    const isEnabled = !element.disabled;\n    const hasClickHandler = element.onclick || element.getAttribute('href') || element.type === 'submit';\n    \n    if (isVisible && isEnabled && hasClickHandler) {\n      workingElements++;\n      console.log(`\u2713 Element ${index + 1}: ${element.tagName} - FUNCTIONAL`);\n    } else {\n      brokenElements++;\n      console.log(`\u2717 Element ${index + 1}: ${element.tagName} - ISSUE DETECTED`);\n      if (!isVisible) console.log('  - Not visible');\n      if (!isEnabled) console.log('  - Disabled');\n      if (!hasClickHandler) console.log('  - No click handler');\n    }\n  });\n  \n  console.log(`\\nSummary: ${workingElements} functional, ${brokenElements} with issues`);\n}\n\n// Run the test\ntestClickableElements();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"network-request-monitoring",children:"Network Request Monitoring"}),"\n",(0,o.jsx)(n.p,{children:"Monitor network requests during testing for API validation and performance testing."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Monitor network requests for testing validation\nconst originalFetch = window.fetch;\nconst networkLog = [];\n\nwindow.fetch = function(...args) {\n  const startTime = Date.now();\n  const url = args[0];\n  \n  console.log(`\ud83c\udf10 API Request: ${url}`);\n  \n  return originalFetch.apply(this, args)\n    .then(response => {\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n      \n      const logEntry = {\n        url,\n        status: response.status,\n        duration,\n        timestamp: new Date().toISOString()\n      };\n      \n      networkLog.push(logEntry);\n      \n      if (response.ok) {\n        console.log(`\u2713 API Response: ${response.status} (${duration}ms)`);\n      } else {\n        console.log(`\u2717 API Error: ${response.status} (${duration}ms)`);\n      }\n      \n      return response;\n    })\n    .catch(error => {\n      console.log(`\u2717 API Failed: ${error.message}`);\n      throw error;\n    });\n};\n\n// Function to get network summary\nfunction getNetworkSummary() {\n  console.log('\\n=== NETWORK REQUEST SUMMARY ===');\n  console.log(`Total requests: ${networkLog.length}`);\n  console.log(`Successful: ${networkLog.filter(r => r.status >= 200 && r.status < 300).length}`);\n  console.log(`Failed: ${networkLog.filter(r => r.status >= 400).length}`);\n  console.log(`Average response time: ${networkLog.reduce((sum, r) => sum + r.duration, 0) / networkLog.length || 0}ms`);\n  return networkLog;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices-for-testing-snippets",children:"Best Practices for Testing Snippets"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Always test in a safe environment"})," before running on production sites"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Respect website terms of service"})," when extracting data"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use console.clear()"})," before running scripts for cleaner test output"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Add error handling"})," for more robust test snippets"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Document test results"})," with clear assertions and expected outcomes"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Test across different browsers"})," for compatibility validation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Create reusable test functions"})," for repetitive testing tasks"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"testing-safety-guidelines",children:"Testing Safety Guidelines"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Never run console scripts from untrusted sources"}),"\n",(0,o.jsx)(n.li,{children:"Be cautious when modifying page content or submitting forms during testing"}),"\n",(0,o.jsx)(n.li,{children:"Always verify extracted data accuracy before using in test reports"}),"\n",(0,o.jsx)(n.li,{children:"Use proper test data that does not contain real user information"}),"\n",(0,o.jsx)(n.li,{children:"Respect rate limiting when testing API endpoints"}),"\n",(0,o.jsx)(n.li,{children:"Clear test data after test execution to avoid data pollution"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"connect-with-me",children:"Connect With Me"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"LinkedIn"}),": ",(0,o.jsx)(n.a,{href:"https://www.linkedin.com/in/gauravkhuraana/",children:"Gaurav Khurana"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"YouTube"}),": ",(0,o.jsx)(n.a,{href:"https://www.youtube.com/@Udzial/playlists",children:"@Udzial"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Medium"}),": ",(0,o.jsx)(n.a,{href:"https://www.medium.com/@gauravkhuraana",children:"My Articles"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Career Guidance"}),": ",(0,o.jsx)(n.a,{href:"https://www.topmate.io/gauravkhurana",children:"Book 1:1 Session"})]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"These browser console snippets are designed specifically for testers and automation engineers to validate functionality, extract test data, and analyze web application behavior. Use them responsibly and always follow your organization's testing guidelines."})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);