"use strict";(self.webpackChunkgauravkhurana=self.webpackChunkgauravkhurana||[]).push([[9254],{84:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Automation/API/postman-assertions","title":"Postman Assertions & Testing Guide","description":"Complete guide to Postman assertions, tests, and scripts for API testing","source":"@site/docs/Automation/API/postman-assertions.mdx","sourceDirName":"Automation/API","slug":"/Automation/API/postman-assertions","permalink":"/docs/Automation/API/postman-assertions","draft":false,"unlisted":false,"editUrl":"https://github.com/gauravkhuraana/gauravkhuraana/edit/main/docs/Automation/API/postman-assertions.mdx","tags":[{"inline":true,"label":"postman","permalink":"/docs/tags/postman"},{"inline":true,"label":"api-testing","permalink":"/docs/tags/api-testing"},{"inline":true,"label":"assertions","permalink":"/docs/tags/assertions"},{"inline":true,"label":"javascript","permalink":"/docs/tags/javascript"},{"inline":true,"label":"automation","permalink":"/docs/tags/automation"}],"version":"current","frontMatter":{"title":"Postman Assertions & Testing Guide","description":"Complete guide to Postman assertions, tests, and scripts for API testing","tags":["postman","api-testing","assertions","javascript","automation"]},"sidebar":"tutorialSidebar","previous":{"title":"HTTP Status Codes - Essential Guide for API Testing","permalink":"/docs/Automation/API/HTTP-Status-Codes"},"next":{"title":"Automation Testing Fundamentals","permalink":"/docs/Automation/automation-must-know-basics/AutomationBasics"}}');var i=s(4848),a=s(8453);const t={title:"Postman Assertions & Testing Guide",description:"Complete guide to Postman assertions, tests, and scripts for API testing",tags:["postman","api-testing","assertions","javascript","automation"]},o="Postman Assertions & Testing Guide",l={},c=[{value:"\ud83d\udccb Table of Contents",id:"-table-of-contents",level:2},{value:"Basic Setup &amp; JSON Response Handling",id:"basic-setup--json-response-handling",level:2},{value:"Converting Response to JSON",id:"converting-response-to-json",level:3},{value:"Status Code Assertions",id:"status-code-assertions",level:2},{value:"Basic Status Code Tests",id:"basic-status-code-tests",level:3},{value:"Response Body &amp; Property Assertions",id:"response-body--property-assertions",level:2},{value:"Property Existence &amp; Values",id:"property-existence--values",level:3},{value:"JSON Body Structure",id:"json-body-structure",level:3},{value:"Headers &amp; Cookies Assertions",id:"headers--cookies-assertions",level:2},{value:"Header Validations",id:"header-validations",level:3},{value:"Cookie Assertions",id:"cookie-assertions",level:3},{value:"Response Time &amp; Size Assertions",id:"response-time--size-assertions",level:2},{value:"Performance Testing",id:"performance-testing",level:3},{value:"Data Type &amp; Value Assertions",id:"data-type--value-assertions",level:2},{value:"Type Checking",id:"type-checking",level:3},{value:"Value Comparisons",id:"value-comparisons",level:3},{value:"JSON Navigation &amp; Searching",id:"json-navigation--searching",level:2},{value:"Working with Nested JSON",id:"working-with-nested-json",level:3},{value:"Array Operations &amp; Loops",id:"array-operations--loops",level:3},{value:"Variables &amp; Request Chaining",id:"variables--request-chaining",level:2},{value:"Setting Variables",id:"setting-variables",level:3},{value:"Request Chaining Example",id:"request-chaining-example",level:3},{value:"Express.js Webhook Server for API Testing",id:"expressjs-webhook-server-for-api-testing",level:3},{value:"Advanced Techniques",id:"advanced-techniques",level:2},{value:"Console Logging &amp; Debugging",id:"console-logging--debugging",level:3},{value:"JavaScript Comparisons",id:"javascript-comparisons",level:3},{value:"Regular Expressions",id:"regular-expressions",level:3},{value:"Validation Loops",id:"validation-loops",level:3},{value:"Dynamic Variables &amp; Pre-request Scripts",id:"dynamic-variables--pre-request-scripts",level:2},{value:"Using Dynamic Variables",id:"using-dynamic-variables",level:3},{value:"Advanced Pre-request Example",id:"advanced-pre-request-example",level:3},{value:"HTML Parsing with Cheerio",id:"html-parsing-with-cheerio",level:3},{value:"Best Practices &amp; Tips",id:"best-practices--tips",level:2},{value:"\ud83d\udca1 Key Tips",id:"-key-tips",level:3},{value:"\ud83d\udd27 Common Patterns",id:"-common-patterns",level:3},{value:"\ud83d\udcda Additional Resources",id:"-additional-resources",level:2}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"postman-assertions--testing-guide",children:"Postman Assertions & Testing Guide"})}),"\n",(0,i.jsx)(n.admonition,{title:"About this guide",type:"info",children:(0,i.jsxs)(n.p,{children:["Created by ",(0,i.jsx)(n.a,{href:"https://linktr.ee/gauravkhurana",children:"Gaurav Khurana"})," based on learning Postman.",(0,i.jsx)(n.br,{}),"\n","Complete Postman Tutorial notes and mindmap available at ",(0,i.jsx)(n.a,{href:"https://udzial.com/postman-tutorial-notes/",children:"udzial.com"})]})}),"\n",(0,i.jsxs)(n.p,{children:["This comprehensive guide covers all essential Postman assertions and testing techniques that can be used in both ",(0,i.jsx)(n.strong,{children:"Tests"})," and ",(0,i.jsx)(n.strong,{children:"Pre-request Scripts"})," sections."]}),"\n",(0,i.jsx)(n.h2,{id:"-table-of-contents",children:"\ud83d\udccb Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#basic-setup--json-response-handling",children:"Basic Setup & JSON Response Handling"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#status-code-assertions",children:"Status Code Assertions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#response-body--property-assertions",children:"Response Body & Property Assertions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#headers--cookies-assertions",children:"Headers & Cookies Assertions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#response-time--size-assertions",children:"Response Time & Size Assertions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#data-type--value-assertions",children:"Data Type & Value Assertions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#json-navigation--searching",children:"JSON Navigation & Searching"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#variables--request-chaining",children:"Variables & Request Chaining"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#advanced-techniques",children:"Advanced Techniques"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#dynamic-variables--pre-request-scripts",children:"Dynamic Variables & Pre-request Scripts"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"basic-setup--json-response-handling",children:"Basic Setup & JSON Response Handling"}),"\n",(0,i.jsx)(n.h3,{id:"converting-response-to-json",children:"Converting Response to JSON"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Basic JSON response handling\r\nvar jsonResponse = pm.response.json();\r\n\r\n// Accessing nested properties\r\nlet name = jsonResponse.points.find(inp => {\r\n    return inp.suite.id === "9000"\r\n});\r\nconsole.log("The point id for the given testcase is " + name.id);\r\nconsole.log("The testPlan id for the given testcase is " + name.testPlan.id);\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"status-code-assertions",children:"Status Code Assertions"}),"\n",(0,i.jsx)(n.h3,{id:"basic-status-code-tests",children:"Basic Status Code Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Status code assertions\r\npm.response.to.have.status("OK");\r\npm.response.to.have.status(200);\r\n\r\n// Multiple status codes\r\npm.expect(pm.response.code).to.be.oneOf([201, 200]);\r\n\r\n// Case insensitive status check\r\npm.expect(pm.response.status.toLowerCase()).to.equal("OK".toLowerCase());\r\n\r\n// Bad request validation\r\npm.response.to.be.badRequest;\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"response-body--property-assertions",children:"Response Body & Property Assertions"}),"\n",(0,i.jsx)(n.h3,{id:"property-existence--values",children:"Property Existence & Values"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Check if property exists\r\npm.test(\"Response should contain the key 'token'\", function() {\r\n    var jsondata = pm.response.json();\r\n    pm.expect(jsondata).to.have.property(\"token\");\r\n});\r\n\r\n// Property value validation\r\npm.test(\"Token must not be null\", function() {\r\n    var jsondata = pm.response.json();\r\n    var flag = jsondata.token == null;\r\n    pm.expect(flag).to.equal(false);\r\n});\r\n\r\n// Property with specific value\r\npm.expect(response).to.have.property('code', 200);\r\npm.expect(response).to.have.property('status', 'OK');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"json-body-structure",children:"JSON Body Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Check if response has JSON body\r\npm.response.to.have.jsonBody();\r\n\r\n// Check value not present\r\npm.response.to.not.have.jsonBody('error');\r\n\r\n// Check if response is JSON\r\npm.response.to.be.json;\r\n\r\n// Verify response is not empty\r\npm.expect(firstRequest.response, 'check saved example').to.not.be.empty;\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"headers--cookies-assertions",children:"Headers & Cookies Assertions"}),"\n",(0,i.jsx)(n.h3,{id:"header-validations",children:"Header Validations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Check header existence\r\npm.response.to.have.header("content-type");\r\n\r\n// Header value validation\r\npm.expect(pm.response.headers.get("Content-Type")).to.eql("text/html; charset=utf-8");\r\npm.expect(pm.response.headers.get("Server")).to.eql("Cowboy");\n'})}),"\n",(0,i.jsx)(n.h3,{id:"cookie-assertions",children:"Cookie Assertions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Cookie existence\r\npm.expect(pm.cookies.has("VstsSession")).to.be.true;\r\n\r\n// Cookie value validation\r\npm.expect(pm.cookies.get("VstsSession")).to.be.equal("12345");\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"response-time--size-assertions",children:"Response Time & Size Assertions"}),"\n",(0,i.jsx)(n.h3,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Response time validations\r\npm.expect(pm.response.responseTime).to.be.below(25000);\r\npm.expect(pm.response.responseTime).to.be.above(199);\r\n\r\n// Using Lodash for range validation\r\npm.expect(_.inRange(pm.response.responseTime, 20, 20000)).to.eql(true);\r\n\r\n// Response size validation\r\npm.expect(pm.response.responseSize).to.not.equal(0);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"data-type--value-assertions",children:"Data Type & Value Assertions"}),"\n",(0,i.jsx)(n.h3,{id:"type-checking",children:"Type Checking"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Data type validations\r\npm.expect(pm.response.json()).to.be.an("array");\r\npm.expect(pm.response.json()).to.be.an("object");\r\npm.expect(parseInt(bookingID)).to.be.a("number");\r\n\r\n// Array validations\r\npm.expect(pm.response.json()).to.have.property(\'collections\').and.be.an(\'array\');\r\npm.expect([2]).to.be.an("array").that.is.empty;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"value-comparisons",children:"Value Comparisons"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Equality assertions\r\npm.expect(res.lastname).to.not.equal("Jonesa");\r\n\r\n// Numerical comparisons\r\npm.expect(res.totalprice).to.be.above(100);\r\npm.expect(res.totalprice).to.be.below(500);\r\n// Range validations\r\npm.expect(parseInt(variable.value), \'check collection variable value\')\r\n    .to.be.at.least(0).and.at.most(30);\r\n\r\n// Text inclusion\r\npm.expect(pm.response.text()).to.include("lastname");\r\n\r\n// Date comparison\r\npm.expect(jsonReq["booking"]["bookingdates"]["checkin"])\r\n    .to.eql(jsonRes["created-booking"]["booking"]["bookingdates"]["checkin"]);\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"json-navigation--searching",children:"JSON Navigation & Searching"}),"\n",(0,i.jsx)(n.h3,{id:"working-with-nested-json",children:"Working with Nested JSON"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Navigate nested JSON structure\r\nlet col = pm.response.json().col;\r\n\r\n// Search within nested JSON\r\nlet folder = col.ite.find(fol => {\r\n    return fol.name === "Collections and environments"\r\n});\r\n\r\n// Collection-level navigation\r\nlet col = pm.response.json().collection;\r\nlet folder = col.item.find(fol => { \r\n    return fol.name == "Add request details"\r\n});\r\n\r\n// Array searching\r\nlet newRequest = col.item[0].item.find(req => { \r\n    return req.name === "raw JSON body"\r\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"array-operations--loops",children:"Array Operations & Loops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Length validation\r\npm.expect(folder.ite.length, 'check number of requests').equals(2);\r\npm.expect(folder.ite.length, 'check number of requests').is.greaterThan(0);\r\npm.expect(response.json().environment.values.length, 'check environment variables').to.equal(4);\r\n\r\n// Foreach loop on response JSON\r\nlet pics = pm.response.json();\r\npics.forEach((pic) => { \r\n    console.log(pic.title, pic.url);\r\n});\r\n\r\n// Advanced searching with validation\r\nlet name = res.results.find(inp => {\r\n    return inp.name === \"Tatooine\"\r\n});\r\n\r\nif (name != undefined) {\r\n    pm.expect(name.length, 'check if we got at least one value with Tatooine')\r\n        .is.greaterThan(0);\r\n} else {\r\n    console.log(\"We did not find Tatooine in the output\");\r\n    pm.expect(true, \"Causing failure as we did not find what was required\")\r\n        .to.equal(false);\r\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"variables--request-chaining",children:"Variables & Request Chaining"}),"\n",(0,i.jsx)(n.h3,{id:"setting-variables",children:"Setting Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Collection variables\r\npm.collectionVariables.set("jsonBody", JSON.stringify(getRandomUserResponse));\r\n\r\n// Global/Environment variables\r\npm.variables.set("hex", pm.variables.replaceIn(\'{{$randomHexColor}}\'));\r\n\r\n// Extract ID from response\r\npm.collectionVariables.set("id", pm.response.json().id);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"request-chaining-example",children:"Request Chaining Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Making subsequent requests\r\nconst collRequest = {\r\n    url: `https://api.getpostman.com/collections/${res.form.collection_uid}`,\r\n    method: 'GET',\r\n    header: {\r\n        'x-api-key': `${res.headers[\"x-api-key\"]}`\r\n    }\r\n};\r\n\r\npm.sendRequest(collRequest, (error, response) => {\r\n    if (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n    \r\n    // Validate chained response\r\n    pm.test('get single collection', () => {\r\n        pm.expect(error).to.equal(null);\r\n        pm.expect(response).to.have.property('code', 200);\r\n        pm.expect(response).to.have.property('status', 'OK');\r\n        pm.expect(response.json().collection.auth.type, 'check collection authorization')\r\n            .to.equal(\"apikey\");\r\n    });\r\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"expressjs-webhook-server-for-api-testing",children:"Express.js Webhook Server for API Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Simple Express.js server to receive and save API responses\r\n// Useful for testing webhooks and capturing request data\r\nvar express = require('express');\r\nvar fs = require('fs');\r\nvar bodyParser = require('body-parser');\r\n\r\nvar app = express();\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json()); // Body parser use JSON data\r\n\r\napp.post('/launches', function(req, res) {\r\n    var outputFilename = './spaceReport.json'; // path of the file to output\r\n    \r\n    // Write JSON payload to file system\r\n    fs.writeFileSync(outputFilename, JSON.stringify(JSON.parse(req.body.payload), null, 4));\r\n    \r\n    res.send('Saved to ' + outputFilename);\r\n});\r\n\r\nvar port = 3100;\r\napp.listen(port);\r\nconsole.log('Express started on port %d ...', port);\n"})}),"\n",(0,i.jsxs)(n.admonition,{title:"Webhook Testing",type:"note",children:[(0,i.jsx)(n.p,{children:"This Express server is perfect for:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testing webhooks"})," - Capture and inspect webhook payloads"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data persistence"})," - Save API responses for analysis"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration testing"})," - Create endpoints for testing API integrations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Request debugging"})," - Log and examine incoming requests"]}),"\n"]}),(0,i.jsx)(n.p,{children:"To use this server:"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Save the code as ",(0,i.jsx)(n.code,{children:"webhook-server.js"})]}),"\n",(0,i.jsxs)(n.li,{children:["Run ",(0,i.jsx)(n.code,{children:"npm install express body-parser"})]}),"\n",(0,i.jsxs)(n.li,{children:["Start with ",(0,i.jsx)(n.code,{children:"node webhook-server.js"})]}),"\n",(0,i.jsxs)(n.li,{children:["Send POST requests to ",(0,i.jsx)(n.code,{children:"http://localhost:3100/launches"})]}),"\n"]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"advanced-techniques",children:"Advanced Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"console-logging--debugging",children:"Console Logging & Debugging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Different console methods with different symbols\r\nconsole.log("Testing log");       // \u2139\ufe0f symbol\r\nconsole.info("Testing info");     // \u2139\ufe0f symbol  \r\nconsole.warn("Testing warn");     // \u26a0\ufe0f symbol\r\nconsole.error("Testing error");   // \u274c symbol\n'})}),"\n",(0,i.jsx)(n.h3,{id:"javascript-comparisons",children:"JavaScript Comparisons"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// == vs === in JavaScript\r\n// == compares only values \r\n// === compares datatypes also\r\n// Examples:\r\n// 4 === 4     \u2192 true\r\n// 4 === '4'   \u2192 false  \r\n// 4 == '4'    \u2192 true\n"})}),"\n",(0,i.jsx)(n.h3,{id:"regular-expressions",children:"Regular Expressions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Using regex for validation\r\nlet firstMarkdownLinkRegex = /\\[(.+)\\]\\((.+)\\)/;\r\npm.expect(firstRequest.request.description.match(firstMarkdownLinkRegex).length, 'check hyperlink')\r\n    .to.equal(3);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"validation-loops",children:"Validation Loops"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Header validation loop\r\nif (firstRequest.request.header) {\r\n    firstRequest.request.header.forEach((header) => {\r\n        pm.expect(header.description, 'check header description').to.exist;\r\n    });\r\n}\r\n\r\n// toString validation for multi-line content\r\npm.expect(test.script.exec.toString(), 'check console log')\r\n    .to.include(\"console.log(\");\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"dynamic-variables--pre-request-scripts",children:"Dynamic Variables & Pre-request Scripts"}),"\n",(0,i.jsx)(n.h3,{id:"using-dynamic-variables",children:"Using Dynamic Variables"}),"\n",(0,i.jsx)(n.p,{children:"Postman provides built-in dynamic variables for generating test data:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"{{$randomHexColor}}"})," - Random hex color"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"{{$randomFirstName}}"})," - Random first name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"{{$randomEmail}}"})," - Random email"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://learning.postman.com/docs/writing-scripts/script-references/variables-list/",children:"Complete list of dynamic variables"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"advanced-pre-request-example",children:"Advanced Pre-request Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Generate dynamic hex color and call external API\r\npm.variables.set("hex", pm.variables.replaceIn(\'{{$randomHexColor}}\'));\r\n\r\nconsole.log("The hex color is", pm.variables.get("hex"));\r\n\r\nlet hex1 = pm.variables.get("hex");\r\nlet hex2 = hex1.substring(1, 7);\r\nlet hex3 = \'http://thecolorapi.com/id?hex=\' + hex2;\r\n\r\nconst getRequest = {\r\n    url: pm.variables.replaceIn(hex3),\r\n    method: \'GET\',\r\n};\r\n\r\npm.sendRequest(getRequest, (error, response) => {\r\n    if (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n    \r\n    response = response.json();\r\n    let hex = response.hex.value;\r\n    let rgb = response.rgb.value;\r\n    let name = response.name.value;\r\n\r\n    console.log("hex value is", hex);\r\n    console.log("rgb value is", rgb);\r\n    console.log("name value is", name);\r\n\r\n    let payload = `{\r\n        "hex": "${hex}",\r\n        "rgb": "${rgb}",\r\n        "name": "${name}"\r\n    }`;\r\n\r\n    pm.collectionVariables.set("payload", payload);\r\n    console.log("Payload", payload);\r\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"html-parsing-with-cheerio",children:"HTML Parsing with Cheerio"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Extract links from HTML response using Cheerio library\r\n$ = cheerio.load(pm.response.text());\r\nlinks = $('a');\r\nconst allLinks = [];\r\n\r\n$(links).each(function (i, link) {\r\n    if($(link).attr('href')) {\r\n        if($(link).attr('href').includes('https')) {\r\n            allLinks.push($(link).attr('href'));\r\n        }\r\n    }\r\n});\r\n\r\nconsole.log(\"all links are\", allLinks);\r\npm.collectionVariables.set(\"links\", JSON.stringify(allLinks));\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"best-practices--tips",children:"Best Practices & Tips"}),"\n",(0,i.jsx)(n.h3,{id:"-key-tips",children:"\ud83d\udca1 Key Tips"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Always use descriptive test names"})," for better reporting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Use ",(0,i.jsx)(n.code,{children:".json()"})," before accessing variables"]})," - it's necessary for proper object access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Chain requests efficiently"})," using ",(0,i.jsx)(n.code,{children:"pm.sendRequest()"})," for complex workflows"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Leverage dynamic variables"})," for realistic test data generation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use proper error handling"})," in request chains and async operations"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"-common-patterns",children:"\ud83d\udd27 Common Patterns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom assertion names"}),": ",(0,i.jsx)(n.code,{children:"pm.expect(value, 'descriptive message').to.equal(expected)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Variable usage"}),": Use ",(0,i.jsx)(n.code,{children:"${}"})," for script variables and ",(0,i.jsx)(n.code,{children:'[""]'})," for Postman variables"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Backticks"}),": Use backticks (`) when variables are involved in strings"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-additional-resources",children:"\ud83d\udcda Additional Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://learning.postman.com/docs/writing-scripts/test-scripts/",children:"Official Postman Testing Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://learning.postman.com/docs/writing-scripts/script-references/variables-list/",children:"Postman Dynamic Variables Reference"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://udzial.com/postman-tutorial-notes/",children:"Complete Postman Tutorial"})}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Connect with the author",type:"tip",children:(0,i.jsxs)(n.p,{children:["Get in touch with ",(0,i.jsx)(n.a,{href:"https://linktr.ee/gauravkhurana",children:"Gaurav Khurana"})," for more automation and testing insights!"]})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var r=s(6540);const i={},a=r.createContext(i);function t(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);